                     -------- TextPro v2.0 -------

         --- FBK (Fondazione Bruno Kessler, Povo, Italy) ----
--- Emanuele Pianta, Christian Girardi, Roberto Zanoli, Mohammad Qwaider ----

TextPro supports the most common NLP tasks, such as tokenization, sentence segmentation, part-of-speech tagging, lemmatization, named entity extraction, chunking and keywords extraction for Italian and English.

Requirements
------------
    * Java 1.6 or higher
    * Perl 5.8.0 or higher
    * GNU make
    * rm, cat, sed, awk (they are fundamental UNIX tools)
    * tcsh shell
    * C++ compiler (gcc 2.95 or higher)
    

Installing TextPro
------------------

1) Unzip the zip file (e.g. TextProFBK-2.0.zip) into a directory of your choice (e.g. /home/).
WARNING: be very careful to don't put the spaces in the path (tcsh shell doesn't like spaces!).

2) TextPro needs a Java™ Virtual Machine on your computer. If you don't have Java™ runtime environment (JRE) yet, download and install it from http://java.sun.com/javase/downloads/index.jsp.
Then set the JAVA_HOME environment variable to point to the directory where the Java™ runtime environment is installed on your  computer.
On csh/tcsh shell type this command:
$> setenv JAVA_HOME <directory where the JDK is installed>

3) From the TextPro home directory execute:
   $> ./INSTALL.sh

If you see the message "All tests passed. Installation complete!" then TextPro run well.


Usage TextPro
-------------

INPUT

TextPro needs a plain text or string by STDIN. The encoding must be UTF8. 
The plain text can be already tokenized (one token per line) or not. 
In the first case you must disable the tokenization by "-d tokenization" option. The empty lines are left.


OUTPUT

TextPro produces an output file with one token per line. The informations for each token are represented in the line with the columns separated by tabular space. 
You choose the output information with -c option (see the document docs/TextPro_annotations.html for details).
It is possible to obtain XML-formatted output from TextPro using the option -xml.


EXAMPLES 

- Part of Speech tagging for Italian language:
$> textpro.sh -l ita -c token+pos -o /tmp/ example_ita.txt

- Named Entity Recognition for English language:
$> textpro.sh -l eng -c token+entity -o /tmp/ example_eng.txt

- Keywords extraction for Italian getting just the best 3 keywords:
$> textpro.sh -l ita -c keywords -kxparams "n=3" -o /tmp/ example_ita.txt

- XML output:
$> textpro.sh -l ita -c token+pos+lemma+entity -xml -o /tmp/ example_ita.txt



HELP
----
$> ./textpro.sh -h
Usage:
   textpro.sh [OPTIONS] <INPUT FILE or DIR>

Options:
-h                                    show the help and exit;
-debug                                debug mode, do not delete tmp-files and to get more verbose output;
-report                               check the input text and print a report on the unknown things;
-v                                    verbose mode;
-html                                 clean html input file; the relevant text is kept as input text;
-l        <LANGUAGE>                  the language: 'eng' or 'ita' are possible; 'eng' is the default;
-c        <COLUMN or HEADER fields> the sequence of column values: token+tokenid+tokennorm+tokenstart+tokenend+tokentype+pos+full_morpho+comp_morpho+lemma+entity+chunk+geoinfo+keywords;
-o        <DIRNAME>                   the output directory path;
-n        <FILENAME>                  the output filename. If this value is specified the output is redirected to the file named as FILENAME. By default the file named as INPUTFILE plus '.txp' suffix;
-xml                                  XML output;
-y                                    force rewriting all existing output files;
-tmp      <TMPDIR>                    set a temporary directory (by default TextPro uses /tmp/);
-d        tokenization+sentence       disable the tokenization or/and sentence splitting;
-r                                    process the input directory recursively;
-kxparams <PARAMS>                    set the options of the keywords extraction module: PARAMS is a list of pair PARAMNAME[=VALUE] separated by comma.
                                      The list of all PARAMNAME and their VALUE are available in docs/KX_Reference.pdf.
-update                               update TextPro model using manual adding;


